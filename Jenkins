pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building the project...'
            }
        }
    
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running Unit and Integration Tests...'
                echo 'for the test'
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Analyzing code...'
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Running Security Scan...'
            }
            post {
                always {
                    steps {
                        echo 'Sending email notification with log attached...'
                        emailext to: 'coopergoullet@gmail.com',
                                 subject: "Security Scan Completed",
                                 body: "The security scan stage has completed. Please find the logs attached.",
                                 attachLog: true, compressLog: true
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to Staging...'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Running Integration Tests on Staging...'
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Deploying to Production...'
            }
        }
    }

    post {
        always {
            steps {
                echo 'Sending email notification with log attached...'
                emailext to: 'coopergoullet@gmail.com',
                         subject: "Build Completed",
                         body: "The build has completed with status: ${currentBuild.result}. Please find the logs attached.",
                         attachLog: true, compressLog: true
            }
        }
    }
}
